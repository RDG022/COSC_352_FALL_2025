{
  "name": "Schking Belisauge",
  "matched_name": "Schking Belisauge",
  "login_id": "schidny_balisague",
  "answer_text": "Schking Belisauge - Quiz 1  CPSC 352\n10/14/25\n\nAn example of a Turing language would be; C++, Python and Java\nNon turing machine's conclude: HTML5,\n\nA turing Machine is a machine like thing thats able to produce multiple machines with in the programming language. It takes data printing in the language to reverse the data it took. It's important because it makes a programmers job less complicated.",
  "scores": {
    "question_1": {
      "score": 0,
      "feedback": "This definition is not correct. A Turing Machine is an abstract mathematical model of computation consisting of an infinite tape, a read/write head, a finite set of states, and a transition function\u2014not a device that produces multiple machines."
    },
    "question_2": {
      "score": 0,
      "feedback": "How it works wasn\u2019t accurately described. A Turing Machine operates by reading a symbol on the tape, writing a symbol, moving the head left or right, and changing state according to its transition rules, until it halts."
    },
    "question_3": {
      "score": 10,
      "feedback": "You noted that it is important, but the reason given is off. Its true importance is foundational: it defines what is computable, lets us reason about algorithmic limits (decidability/undecidability), and underpins the Church\u2013Turing thesis."
    },
    "question_4": {
      "score": 0,
      "feedback": "You did not explain Turing Completeness. A language is Turing Complete if it can simulate a Turing Machine (e.g., supports unbounded memory and conditional/looping constructs), meaning it can compute any computable function given enough time and memory."
    },
    "question_5": {
      "score": 20,
      "feedback": "Good examples. C++, Python, and Java are Turing Complete. HTML (a markup language) is a good example of a non\u2013Turing Complete language by itself."
    }
  },
  "total_score": 30,
  "overall_feedback": "Schking, I appreciate your effort and the solid examples for Turing Complete vs. non\u2013Turing Complete languages. To strengthen your understanding, focus on the formal idea of a Turing Machine: tape, head, states, and transition rules. This model matters because it defines the boundaries of computation and helps us reason about what problems can or cannot be solved by any computer. Review Turing Completeness as the ability to simulate a Turing Machine. With these foundations clear, your explanations will become much more precise. Keep going\u2014you\u2019re close to connecting the concepts.",
  "grading_time_seconds": 108.14
}